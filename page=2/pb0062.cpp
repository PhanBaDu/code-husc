#include <bits/stdc++.h>
using namespace std;

int main() {
    int n, m;
    cin >> n >> m;


    vector <double> v(n);

    for (auto &i : v) {
        cin>>i;
    }

    sort(v.begin(), v.end(), greater<double>());

    double ans = 0.0;
    for (int i = 0; i < m; i++) {
        ans += v[i];
    }

    cout << fixed << setprecision(2) << ans << endl;
}

// 1Ô∏è‚É£ for (auto i : v) ‚Äì Duy·ªát b·∫±ng b·∫£n sao
// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// vector<int> v = {1, 2, 3, 4, 5};

// for (auto i : v) {  // i l√† m·ªôt b·∫£n sao c·ªßa t·ª´ng ph·∫ßn t·ª≠ trong v
//     cout << i << " ";
// }
// ƒê·∫∑c ƒëi·ªÉm:
// i l√† m·ªôt b·∫£n sao (copy) c·ªßa t·ª´ng ph·∫ßn t·ª≠ trong v.
// M·ªói ph·∫ßn t·ª≠ ƒë∆∞·ª£c sao ch√©p v√†o bi·∫øn i, n√™n thay ƒë·ªïi i kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ph·∫ßn t·ª≠ g·ªëc trong v.
// T·ªën th√™m b·ªô nh·ªõ, nh·∫•t l√† khi v ch·ª©a ki·ªÉu d·ªØ li·ªáu l·ªõn (v√≠ d·ª•: std::string, std::vector).
// ‚úÖ V√≠ d·ª• minh h·ªça:

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// vector<int> v = {1, 2, 3, 4, 5};

// for (auto i : v) {
//     i = i * 2;  // Ch·ªâ thay ƒë·ªïi gi√° tr·ªã c·ªßa i, kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn v
// }

// for (auto x : v) {
//     cout << x << " ";  // Output: 1 2 3 4 5 (v·∫´n gi·ªØ nguy√™n)
// }
// 2Ô∏è‚É£ for (const auto &i : v) ‚Äì Duy·ªát b·∫±ng tham chi·∫øu h·∫±ng (const reference)
// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// vector<int> v = {1, 2, 3, 4, 5};

// for (const auto &i : v) {  // i l√† m·ªôt tham chi·∫øu h·∫±ng, kh√¥ng th·ªÉ thay ƒë·ªïi gi√° tr·ªã c·ªßa ph·∫ßn t·ª≠ g·ªëc
//     cout << i << " ";
// }
// ƒê·∫∑c ƒëi·ªÉm:
// i l√† m·ªôt tham chi·∫øu h·∫±ng (const reference) ƒë·∫øn t·ª´ng ph·∫ßn t·ª≠ trong v, kh√¥ng t·∫°o b·∫£n sao.
// Kh√¥ng t·ªën th√™m b·ªô nh·ªõ v√¨ kh√¥ng t·∫°o b·∫£n sao.
// Kh√¥ng th·ªÉ thay ƒë·ªïi gi√° tr·ªã c·ªßa ph·∫ßn t·ª≠ trong v.
// ‚õî V√≠ d·ª• sai (g√¢y l·ªói bi√™n d·ªãch):

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// for (const auto &i : v) {
//     i = i * 2;  // ‚ùå L·ªói: i l√† tham chi·∫øu h·∫±ng, kh√¥ng th·ªÉ thay ƒë·ªïi gi√° tr·ªã
// }
// ‚úÖ D√πng khi n√†o?

// Khi ch·ªâ ƒë·ªçc d·ªØ li·ªáu, kh√¥ng c·∫ßn thay ƒë·ªïi gi√° tr·ªã.
// Khi container c√≥ ph·∫ßn t·ª≠ k√≠ch th∆∞·ªõc l·ªõn, v√≠ d·ª•: std::string, std::vector<int>.
// üöÄ V√≠ d·ª• v·ªõi std::string (t·ªën b·ªô nh·ªõ n·∫øu kh√¥ng d√πng &):

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// vector<string> names = {"Alice", "Bob", "Charlie"};

// // T·ªën b·ªô nh·ªõ v√¨ m·ªói ph·∫ßn t·ª≠ b·ªã sao ch√©p
// for (auto name : names) {  
//     cout << name << " ";
// }

// // T·ªëi ∆∞u h∆°n, kh√¥ng t·∫°o b·∫£n sao
// for (const auto &name : names) {  
//     cout << name << " ";
// }

// Trong C++, c√≥ nhi·ªÅu c√°ch duy·ªát qua m·∫£ng, vector, set, map v√† c√°c container kh√°c. D∆∞·ªõi ƒë√¢y l√† t·∫•t c·∫£ c√°c ki·ªÉu duy·ªát v√≤ng l·∫∑p trong C++.

// üîπ 1. Duy·ªát b·∫±ng ch·ªâ s·ªë (Index-based Loop)
// D√πng khi b·∫°n c·∫ßn truy c·∫≠p ph·∫ßn t·ª≠ theo ch·ªâ s·ªë.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// vector<int> v = {10, 20, 30, 40, 50};

// for (size_t i = 0; i < v.size(); i++) {
//     cout << v[i] << " ";
// }
// üìå ∆Øu ƒëi·ªÉm: C√≥ th·ªÉ truy c·∫≠p ph·∫ßn t·ª≠ theo ch·ªâ s·ªë.
// üìå Nh∆∞·ª£c ƒëi·ªÉm: Kh√¥ng d√πng ƒë∆∞·ª£c v·ªõi set, unordered_set, map (v√¨ ch√∫ng kh√¥ng c√≥ ch·ªâ m·ª•c).

// üîπ 2. Duy·ªát b·∫±ng v√≤ng l·∫∑p for-each (Range-based for)
// C√°ch ƒë∆°n gi·∫£n nh·∫•t ƒë·ªÉ duy·ªát qua vector, array, set, map, v.v.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// vector<int> v = {10, 20, 30, 40, 50};

// for (auto i : v) {
//     cout << i << " ";
// }
// üìå ∆Øu ƒëi·ªÉm: D·ªÖ ƒë·ªçc, ng·∫Øn g·ªçn.
// üìå Nh∆∞·ª£c ƒëi·ªÉm: Kh√¥ng ch·ªânh s·ª≠a ƒë∆∞·ª£c gi√° tr·ªã trong container.

// üõ† Duy·ªát v·ªõi tham chi·∫øu & ƒë·ªÉ ch·ªânh s·ª≠a gi√° tr·ªã
// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// for (auto &i : v) {
//     i *= 2;  // Nh√¢n ƒë√¥i gi√° tr·ªã c√°c ph·∫ßn t·ª≠
// }
// üîπ 3. Duy·ªát b·∫±ng iterator (d√πng .begin() v√† .end())
// D√πng ƒë∆∞·ª£c v·ªõi m·ªçi container nh∆∞ vector, set, map, unordered_map, v.v.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// vector<int> v = {10, 20, 30, 40, 50};

// for (auto it = v.begin(); it != v.end(); it++) {
//     cout << *it << " ";
// }
// üìå ∆Øu ƒëi·ªÉm: D√πng ƒë∆∞·ª£c v·ªõi t·∫•t c·∫£ container, bao g·ªìm set v√† map.
// üìå Nh∆∞·ª£c ƒëi·ªÉm: D√†i d√≤ng h∆°n for-each.

// üõ† Duy·ªát v·ªõi reverse_iterator
// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// for (auto it = v.rbegin(); it != v.rend(); it++) {
//     cout << *it << " ";
// }
// üìå L·ª£i √≠ch: Duy·ªát ng∆∞·ª£c t·ª´ cu·ªëi l√™n ƒë·∫ßu.

// üîπ 4. Duy·ªát b·∫±ng while v·ªõi iterator
// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// vector<int> v = {10, 20, 30, 40, 50};
// auto it = v.begin();

// while (it != v.end()) {
//     cout << *it << " ";
//     it++;
// }
// üìå ∆Øu ƒëi·ªÉm: Linh ho·∫°t, c√≥ th·ªÉ d√πng v·ªõi nhi·ªÅu ƒëi·ªÅu ki·ªán h∆°n.
// üìå Nh∆∞·ª£c ƒëi·ªÉm: D√†i d√≤ng h∆°n for.

// üîπ 5. Duy·ªát map (D√πng .first v√† .second)
// V√¨ map l∆∞u key-value n√™n ta c·∫ßn iterator ho·∫∑c for-each.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// map<string, int> mp = {{"Alice", 10}, {"Bob", 20}, {"Charlie", 30}};

// for (auto it = mp.begin(); it != mp.end(); it++) {
//     cout << it->first << " " << it->second << endl;
// }
// üõ† Duy·ªát map ng·∫Øn g·ªçn h∆°n:
// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// for (auto &[key, value] : mp) {
//     cout << key << " " << value << endl;
// }
// üîπ 6. Duy·ªát unordered_map
// T∆∞∆°ng t·ª± map, nh∆∞ng kh√¥ng c√≥ th·ª© t·ª±.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// unordered_map<int, string> umap = {{1, "One"}, {2, "Two"}, {3, "Three"}};

// for (auto &[key, value] : umap) {
//     cout << key << " -> " << value << endl;
// }
// üîπ 7. Duy·ªát set v√† unordered_set
// Kh√¥ng th·ªÉ d√πng ch·ªâ s·ªë n√™n ph·∫£i d√πng iterator ho·∫∑c for-each.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// set<int> s = {10, 20, 30, 40, 50};

// for (auto it = s.begin(); it != s.end(); it++) {
//     cout << *it << " ";
// }
// Ho·∫∑c d√πng for-each:

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// for (auto i : s) {
//     cout << i << " ";
// }
// üîπ 8. Duy·ªát deque
// Gi·ªëng vector, nh∆∞ng c√≥ th·ªÉ th√™m/x√≥a ph·∫ßn t·ª≠ ·ªü c·∫£ ƒë·∫ßu v√† cu·ªëi.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// deque<int> dq = {10, 20, 30, 40, 50};

// for (auto i : dq) {
//     cout << i << " ";
// }
// üîπ 9. Duy·ªát list (danh s√°ch li√™n k·∫øt)
// Ch·ªâ c√≥ th·ªÉ d√πng iterator ho·∫∑c for-each.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// list<int> lst = {10, 20, 30, 40, 50};

// for (auto it = lst.begin(); it != lst.end(); it++) {
//     cout << *it << " ";
// }
// üîπ 10. Duy·ªát priority_queue (h√†ng ƒë·ª£i ∆∞u ti√™n)
// Kh√¥ng th·ªÉ duy·ªát tr·ª±c ti·∫øp v√¨ priority_queue kh√¥ng h·ªó tr·ª£ iterator.
// Ta ph·∫£i d√πng v√≤ng l·∫∑p while ƒë·ªÉ pop t·ª´ng ph·∫ßn t·ª≠.

// cpp
// Sao ch√©p
// Ch·ªânh s·ª≠a
// priority_queue<int> pq;
// pq.push(30);
// pq.push(10);
// pq.push(50);
// pq.push(40);

// while (!pq.empty()) {
//     cout << pq.top() << " ";  // L·∫•y ph·∫ßn t·ª≠ l·ªõn nh·∫•t
//     pq.pop();
// }
// üìå L∆∞u √Ω: priority_queue m·∫∑c ƒë·ªãnh l√† heap max (ph·∫ßn t·ª≠ l·ªõn nh·∫•t lu√¥n ·ªü ƒë·∫ßu).

// üöÄ T√≥m t·∫Øt
// Ki·ªÉu container	Duy·ªát b·∫±ng for-each	Duy·ªát b·∫±ng for	Duy·ªát b·∫±ng iterator
// vector	‚úÖ	‚úÖ	‚úÖ
// array	‚úÖ	‚úÖ	‚úÖ
// deque	‚úÖ	‚úÖ	‚úÖ
// list	‚úÖ	‚ùå	‚úÖ
// set	‚úÖ	‚ùå	‚úÖ
// unordered_set	‚úÖ	‚ùå	‚úÖ
// map	‚úÖ	‚ùå	‚úÖ
// unordered_map	‚úÖ	‚ùå	‚úÖ
// priority_queue	‚ùå	‚ùå	‚ùå (ch·ªâ d√πng while)


// #include <iostream>
// #include <vector>

// int main() {
//     std::vector<int> v = {10, 20, 30};
    
//     for (int i = v.size() - 1; i >= 0; i--) {  // ‚ùå Sai: v.size() tr·∫£ v·ªÅ size_t, √©p v·ªÅ int c√≥ th·ªÉ g√¢y l·ªói
//         std::cout << v[i] << " ";
//     }

//     return 0;

// for (size_t i = v.size(); i-- > 0; ) {  // ‚úÖ C√°ch ƒë√∫ng
//     std::cout << v[i] << " ";
// }